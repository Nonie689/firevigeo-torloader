#!/usr/bin/env bash

verbose_mode="false"


check_root() {
    if [[ "${UID}" -ne 0 ]]; then
        echo "Please run this program as a root!"
	exit 121
    fi
}


__init__ () {

paramerr=false

not_there=false
if ! which tor > /dev/null 2>&1 ; then
  echo "Found not tor! - Please install it!"
  not_there=true
fi

if ! which go-dispatch-proxy > /dev/null 2>&1 ; then
  echo "Found not go-dispatch-proxy! - Please install it!"
  not_there=true
else
  setcap cap_net_raw=eip $(which go-dispatch-proxy)
fi

if ! which redsocks > /dev/null 2>&1 ; then
  echo "Found not redsocks! - Please install it!"
  not_there=true
fi

if ! which conky > /dev/null 2>&1 ; then
  echo "Found not conky - Please install it!"
  not_there=true
fi

if $not_there ; then
exit 2
fi
}

generate_random(){
shuf -i 10000-1000000 -n1
}

function __main__() {
  ###  Here is the main construct of this tool! 
  check_root
  
  # Killall runnig tor processes if existing!
  kill $(pidof tor) &> /dev/null
  __init__

  own_params "${@}"
  modprobe dummy

}

get_date_time() {
#get date time formated"
  date +%Y.%m.%d\ at\ %h:%m
}


start_tor_servers() {

  start=$1
  end=$2
  
  readonly number_torsrv_wanted="$(expr $end -  $start)"
  readonly script="$0"
  readonly basename="$(dirname $script)"

  echo "nameserver 127.0.0.1" > /etc/resolv.conf

  #  Early inititialisation part -  Setting up start variables with needet init values!
  # Stores the executing start date.
  readonly _cdate="$(date +%Y%m%d)"
  readonly _init_date="$(get_date_time)"

  readonly _init_random="$(generate_random)"
  readonly _tor_pass_readable="$_cdate$_init_random"
  readonly _tor_hashpass="$(tor --hash-password $_tor_pass_readable|tail +3)"
  # Variables related to the log file. Divided into three parts due
  # to the better possibility of manipulation for the user.
  readonly _log_directory="/var/log"
  readonly _log_file="firevigeo-prepare.${_cdate}.log"
  readonly _log_stdout="${_log_directory}/firevigeo-prepare.stdout.log"
  readonly _log_path="${_log_directory}/${_log_file}"
  readonly _torrc_config="/etc/tor/torrc"
  readonly _proxychain_config="/etc/proxychains"

  counter=0
  counter_rw=1
  dnsport=53
  ip_addr=10

  # Saved new hashed pass as readable file
 echo "Saved new hashed pass to /etc/tor/hashed_pass" &&  echo -e "
   ###############################################################
 \n####### Passwords for all tor  processed started with firevigeo!\n#######Generated on:  $_init_date   for  Tor Proxy Number from    $start till $end ! \n####### Number of Tor Proxy clients =   $number_torsrv_wanted!\n###############################################################\n\n\n# Readable Tor password\n_pass_plain=$_tor_pass_readable\n\n# Generated hash Tor password\n_pass_hash=$_tor_hashpass" > /etc/tor/hashed_pass && chmod 600  /etc/tor/hashed_pass

   # Copy uncomplete conky config to  systemfolder!    ----    Using  files from script  ."/data/config"  folder 
   mkdir -p "/etc/conky/cpu-colors-edit/" 2> /dev/null
   cp -f "${basename}/data/config/conkyrc" "/etc/conky/cpu-colors-edit/.conkyrc"


   ### Run  forloop and create custom configs for conky and proxychain!
   for number in $(seq $start $end)
    do
	newcontrolport="$(expr $number + 1100)"
    echo "Tor socks: $number "

    # Create  proxychain config foreach tor proxy device with new settings !
    cp "${basename}/data/config/proxychains.conf" $_proxychain_config.$counter.conf
    echo "socks4 10.0.0.$ip_addr $number" >> $_proxychain_config.$counter.conf
	
   # Add  custom conkycode to conkyrc  tor displaying tor proxy stuff!
    echo \${goto 12}\${voffset 0}\${font Ubuntu:style=Bold:size=8}Tor $counter_rw IP: \${alignr}\${color2}\${execp proxychains -q -f $_proxychain_config.$counter.conf 'curl -s https://myip.privex.io/index.json| jq  -r .ip' }\${color} >> /etc/conky/cpu-colors-edit/.conkyrc
  
    # Set torrc config
    echo "ExcludeNodes {es},{us},{ca},{de},{gb},{au},{nz},{dk},{fr},{nl},{no},{be},{it},{se},{??} StrictNodes 1" > $_torrc_config.$number
    echo "ExitNodes {eg},{hk},{ph},{tj},{tw},{th},{kp},{jp},{ru} StrictNodes 1" >> $_torrc_config.$number
    echo "User tor" >> $_torrc_config.$number
    echo "Sandbox 1" >> $_torrc_config.$number
    # Add foreach Tor-Gateway device extra torrc options with new custom settings!!
    echo "ExcludeNodes {es},{us},{ca},{de},{gb},{au},{nz},{dk},{fr},{nl},{no},{be},{it},{se},{??} StrictNodes 1" > $_torrc_config.$number
    echo "ExitNodes {eg},{hk},{ph},{tj},{tw},{th},{kp},{jp},{ru} StrictNodes 1" >> $_torrc_config.$number
    echo "User tor" >> $_torrc_config.$number
    echo "Sandbox 1" >> $_torrc_config.$number
    echo "NewCircuitPeriod 2" >> $_torrc_config.$number
    cp -rp "/var/lib/tor" "/var/lib/tor.$number"
    echo "DataDirectory /var/lib/tor.$number" >> $_torrc_config.$number
    echo "SocksPort 10.0.0.$ip_addr:$number" >> $_torrc_config.$number
    ip_addr_list="$ip_addr_list 10.0.0.$ip_addr:$number"
    echo "ControlPort $newcontrolport" >> $_torrc_config.$number
    echo "HashedControlPassword $_tor_hashpass" >> $_torrc_config.$number
    if test $counter -eq 0 ; then
      echo "DNSPort $dnsport" >> $_torrc_config.$number
    fi

    ip link add eth$counter type dummy  > /dev/null 2>&1 
    ip addr add 10.0.0.$ip_addr/24 brd + dev eth$counter label eth$counter:0  > /dev/null 2>&1 
    ip link set dev eth$counter up  > /dev/null 2>&1 

    let counter=counter+1
    let counter_rw=counter_rw+1
    let ip_addr=ip_addr+1

#Start tor proxy router for virtual  network card! Then check the  execution succeed!
tor -f $_torrc_config.$number > /dev/null 2>&1 & 
if [ $? -eq 0 ] ; then
      echo "Tor $counter started!"
    else
      echo "Failed to start Tor!"
    fi
	
# End of loop for creating custom new settings!
 done

   # Save conkyrc to users folder!
   UHOME="/home"
   # get list of all users
  _USERS="$(awk -F':' '{ if ( $3 >= 500 ) print $1 }' /etc/passwd)"
  for u in $_USERS
  do
     _dir="${UHOME}/${u}"
     if [ -d "$_dir" ]
     then
	   mkdir -p $_dir/.conky/cpu-colors-edit 2> /dev/null 
        cp -f /etc/conky/cpu-colors-edit/.conkyrc "$_dir/.conky/cpu-colors-edit/"
         chown $(id -un $u):$(id -gn $u) "$_dir/.conky/cpu-colors-edit/.conkyrc"
     fi
  done
     #Reset iptables
     echo
     echo "Reset iptables!"
     /usr/bin/iptables -F && /usr/bin/iptables -t nat -F 
     # Load iptables
     echo "Load iptables!"
     sleep 3
     iptables-restore /etc/iptables/redsocks.rules 2> /dev/null
     if [ "$?" -ne 0 ] ; then
       echo "can't set /etc/iptables/iptables.rules"
       exit 22
     fi

  echo "Tor ControlPort readable password is: $_tor_pass_readable"
  echo "Tor ControlPort hashed password is: $_tor_hashpass"
  echo
  echo "Start Load Balancer for: $ip_addr_list"

  exit 0
}


own_params() {
    start=5090
    end=5100

    if [[ "$#" -eq 0 ]]; then
        printf "%s\\n" "${prog_name}: Argument required"
        printf "%s\\n" "Try '${prog_name} --help' for more information."
        exit 1
    fi

    if [[ "$#" -gt 0 ]]; then
    case $1 in

      -h|--help)

        _help_

        shift ; _exit_ "0" ;;

      --verbose)

        export verbose_mode="true"

        shift ;;

      -s|--start)

        start_tor_servers $start $end
        shift ;;

      -k|--kill)

        export kill_state="1"

        export kill_status="0"

        shift ;;

      -s|--show-key)

        export show_id_state="1"

        shift ;;

      -n|--new-id)


        export new_id_state="1"

        shift ;;

      *)

        if [[ "$2" == "-" ]] ; then

          printf "%s: invalid option -- '%s'\\n" "$_init_name" "$2"
          _exit_ "1"


        # elif [[ -z "$2" ]] ; then break ; fi
        else break ; fi

        ;;

    esac

    if [[ "$2" && "$3" ]]; then
	if [[ $2 -le 1 || $2 -ge 65535 ]]; then
	  echo "The allowed port range for the start port is 1-65535!"
	  paramerr=true
	elif [[ $2 -le 1 || $2 -ge 65535 ]]; then
          echo "The allowed port range for the last port is 1-65535!"
          paramerr=true
	elif [[ ! $paramerr ]]; then
	  exit 2
	fi
        if [[ "$#" -gt 1 ]]; then
	  echo
          echo "The optional argument values are: start port: $2, last port: $3."
          start=$2
          end=$3
          #Return true if one argument is given
        fi
    elif [[ ! "$2" && "$3" || "$2" && ! "$3" ]]; then
        echo
        echo "The correct optional value is: [start-port] [end-port]"
        exit 2
    fi

  fi
}


__main__ "${@}"

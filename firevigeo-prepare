#!/bin/bash

verbose_mode="false"


check_root() {
    if [[ "${UID}" -ne 0 ]]; then
        echo "Please run this program as a root!"
	exit 121
    fi
}


__init__ () {

paramerr=false
systemd=true

if ! which hostnamectl > /dev/null 2>&1 || ! hostnamectl > /dev/null 2>&1 ; then
  systemd=false
fi

if ! which tor > /dev/null 2>&1 ; then
  echo "Found not tor! - Exit"
  exit 7
fi

if ! which redsocks > /dev/null 2>&1 ; then
  echo "Found not redsocks!" - Exit!
  exit 7
fi

if ! which go-dispatch-proxy > /dev/null 2>&1 ; then
  echo "Found not go-dispatch-proxy! - Exit"
  exit
else
  setcap cap_net_raw=eip $(which go-dispatch-proxy)
fi

}



function __main__() {
  check_root
  __init__

  own_params "${@}"
  modprobe dummy

}

start_tor_servers() {

  start=$1
  end=$2

  readonly script="$0"
  readonly basename="$(dirname $script)"

  if [ $systemd = true ] ; then
    cp ${basename}/data/config/tor@.service  /usr/lib/systemd/system/tor@.service
  fi

  echo nameserver 127.0.0.1 > /etc/resolv.conf
  # Stores the current date.
  readonly _cdate=$(date +%Y%m%d)
  readonly _tor_pass_readable=$(date +%Y%m%d && echo $(( $RANDOM % 100000000 + 1 )))
  readonly _tor_hashpass="$(tor --hash-password "${_tor_pass_readable}" | tail -1)"
  # Variables related to the log file. Divided into three parts due
  # to the better possibility of manipulation for the user.
  # shellcheck disable=SC2154
  readonly _log_directory="/var/log"
  # shellcheck disable=SC2154
  readonly _log_file="firevigeo-prepare.${_cdate}.log"
  readonly _log_stdout="${_log_directory}/firevigeo-prepare.stdout.log"
  readonly _log_path="${_log_directory}/${_log_file}"
  readonly _torrc_config=/etc/tor/torrc
  readonly _proxychain_config=/etc/proxychains

  counter=0
  counter_rw=1
  dnsport=53
  ip_addr=10

  if [ $systemd = true ]; then
    cp ${basename}/data/config/tor@.service /usr/lib/systemd/system/tor.service
  fi


  # Conky basic config
  mkdir -p /etc/conky/cpu-colors-edit/ 2> /dev/null
  cp -f ${basename}/data/config/conkyrc /etc/conky/cpu-colors-edit/.conkyrc
  echo $_tor_pass_readable > /etc/tor/hashed_pass

   for number in $(seq $start $end)
    do
    newcontrolport=$(expr $number + 1100)

    echo "Tor socks: $number "

    # Set proxychain config
    cp ${basename}/data/config/proxychains.conf $_proxychain_config.$counter.conf
    echo socks4 10.0.0.$ip_addr $number >> $_proxychain_config.$counter.conf

    # Set conky specific parts


    echo \${goto 32}\${voffset -4}Tor $counter_rw IP: \${alignr}\${color2}\${exec proxychains -q -f $_proxychain_config.$counter.conf "curl -s 'http://ip-api.com/' | grep query | awk -F ':' '{print \$2}' | awk -F '\"' '{print \$2}'"}\${color} >> /etc/conky/cpu-colors-edit/.conkyrc
  
    # Set torrc config
    echo "ExcludeNodes {es},{us},{ca},{de},{gb},{au},{nz},{dk},{fr},{nl},{no},{be},{it},{se},{??} StrictNodes 1" > $_torrc_config.$number
    echo ExitNodes {eg},{hk},{ph},{tj},{tw},{th},{kp},{jp},{ru} StrictNodes 1 >> $_torrc_config.$number
    echo "User tor" >> $_torrc_config.$number
    echo "Sandbox 1" >> $_torrc_config.$number
    echo "NewCircuitPeriod 2" >> $_torrc_config.$number
    cp -rp /var/lib/tor /var/lib/tor.$number
    echo "DataDirectory /var/lib/tor.$number" >> $_torrc_config.$number
    echo "SocksPort 10.0.0.$ip_addr:$number" >> $_torrc_config.$number
    ip_addr_list="$ip_addr_list 10.0.0.$ip_addr:$number"
    echo "ControlPort $newcontrolport" >> $_torrc_config.$number
    echo "HashedControlPassword $_tor_hashpass" >> $_torrc_config.$number
    if test $counter -eq 0 ; then
      echo "DNSPort $dnsport" >> $_torrc_config.$number
    fi

    #brctl addbr Tor$counter
    #ip link set dev Tor$counter up
    #ip addr add 10.0.0.$ip_addr/24 br 255.255.255.0 dev Tor$counter

    ip link add eth$counter type dummy  > /dev/null 2>&1 
    ip addr add 10.0.0.$ip_addr/24 brd + dev eth$counter label eth$counter:0  > /dev/null 2>&1 
    ip link set dev eth$counter up  > /dev/null 2>&1 

    let counter=counter+1C
    let counter_rw=counter_rw+1
    let ip_addr=ip_addr+1
    tor -f $_torrc_config.$number > /dev/null 2>&1 & 
    if [[ $? -ne 0 ]] ; then
      echo "Tor $counter started!"
    else
      echo "Failed to start Tor!"
    fi

  done

 # if [ $systemd = true ];then
 #   systemctl restart iptables
 # else
 #   iptables-restore < /etc/iptables/iptables.rules
 # fi

   # Save conkyrc to users folder!
   UHOME="/home"
   # get list of all users
  _USERS="$(awk -F':' '{ if ( $3 >= 500 ) print $1 }' /etc/passwd)"
  for u in $_USERS
  do
     _dir="${UHOME}/${u}"
     if [ -d "$_dir" ]
     then
	 mkdir -p $_dir/.conky/cpu-colors-edit
         cp -f /etc/conky/cpu-colors-edit/.conkyrc "$_dir/.conky/cpu-colors-edit/"
         chown $(id -un $u):$(id -gn $u) "$_dir/.conky/cpu-colors-edit/.conkyrc"
     fi
  done

  echo "Tor ControlPort readable password is: $_tor_pass_readable"
  echo "Tor ControlPort hashed password is: $_tor_hashpass"
  echo "Start Load Balancer for: $ip_addr_list"
#        "value is less or equal 1023"


#        _sprintf "stop" "value is equal or grather then 65536"

}


own_params() {
    start=5090
    end=5100

    if [[ "$#" -eq 0 ]]; then
        printf "%s\\n" "${prog_name}: Argument required"
        printf "%s\\n" "Try '${prog_name} --help' for more information."
        exit 1
    fi

    if [[ "$#" -gt 0 ]]; then
    case $1 in

      -h|--help)

        _help_

        shift ; _exit_ "0" ;;

      --verbose)

        export verbose_mode="true"

        shift ;;

      -s|--start)

        start_tor_servers $start $end
        shift 2 ;;

      -k|--kill)

        export kill_state="1"

        export kill_status="0"

        shift ;;

      -s|--show-key)

        export show_id_state="1"

        shift ;;

      -n|--new-id)


        export new_id_state="1"

        shift ;;

      *)

        if [[ "$2" == "-" ]] || [[ ! -z "$2" ]] ; then

          printf "%s: invalid option -- '%s'\\n" "$_init_name" "$2"
          _exit_ "1"


        # elif [[ -z "$2" ]] ; then break ; fi
        else break ; fi

        ;;

    esac

    if [[ ! "$2" && ! "$3" ]]; then
	if [[ $2 -le 1 || $2 -ge 65535 ]]; then
	  echo "The allowed port range for the start port is 1-65535!"
	  paramerr=true
	elif [[ $2 -le 1 || $2 -ge 65535 ]]; then
          echo "The allowed port range for the last port is 1-65535!"
          paramerr=true
	elif [[ ! $paramerr ]]; then
	  exit 2
	fi
        if [[ "$#" -gt 1 ]]; then
	  echo
          echo "The optional argument values are: start port: $2, last port: $3."
          start=$2
          end=$3
          #Return true if one argument is given
        fi
    elif [[ ! "$2" && "$3" || "$2" && ! "$3" ]]; then
        echo
        echo "The correct optional value is: [start-port] [end-port]"
        exit 2
    else
        echo
        echo "There is no optional argument. Use default values: start port: $start, last port: $end"
    fi

  fi
}


__main__ "${@}"

#!/bin/bash

verbose_mode="false"


check_root() {
    if [[ "${UID}" -ne 0 ]]; then
        die "Please run this program as a root!"
    fi
}

check_root

__init__ () {


if ! which tor; then
  echo "Found not tor! - Exit"
  exit
fi

if ! which redsocks; then
  echo "Found not redsocks!" - Exit!
  exit
fi

#if ! setcap cap_net_raw=eip ${which go-dispatch-proxy}; then
#  echo "Found not go-dispatch-proxy! - Exit"
#  exit
#fi

}



function __main__() {
#  __init__

  modprobe dummy
  # Stores the current date.
  readonly _cdate=$(date +%Y%m%d)
  readonly _tor_hashpass="$(tor --hash-password "$(date +%Y%m%d && echo $(( $RANDOM % 100000000 + 1 )))" | tail -1)"
  # Variables related to the log file. Divided into three parts due
  # to the better possibility of manipulation for the user.
  # shellcheck disable=SC2154
  readonly _log_directory="/var/log"
  # shellcheck disable=SC2154
  readonly _log_file="firevigeo-prepare.${_cdate}.log"
  readonly _log_stdout="${_log_directory}/firevigeo-prepare.stdout.log"
  readonly _log_path="${_log_directory}/${_log_file}"
  readonly _torrc_config=/etc/tor/torrc


counter=0
dnsport=53
ip_addr=10
  for number in {9050..9059}
    do
    mkdir /var/lib/tor.$number
    cp data/config/tor@.service /usr/lib/systemd/system/tor@$number.service
    newcontrolport=$(expr $number + 1100)

    echo "Tor socks: $number "

    echo "ExcludeNodes {es},{us},{ca},{de},{gb},{au},{nz},{dk},{fr},{nl},{no},{be},{it},{sw},{??} StrictNodes 1" > /etc/tor/torrc.$number
    echo "User tor" >> /etc/tor/torrc.$number
    echo "Sandbox 1" >> /etc/tor/torrc.$number
    echo "NewCircuitPeriod 5" >> /etc/tor/torrc.$number
    
    echo "DataDirectory /var/lib/tor.$number" >> /etc/tor/torrc.$number
    echo "SocksPort 10.0.0.$ip_addr:$number" IsolateClientAddr IsolateClientProtocol IsolateDestAddr >> /etc/tor/torrc.$number
    ip_addr_list="$ip_addr_list 10.0.0.$ip_addr:$number"
    echo "ControlPort $newcontrolport" >> /etc/tor/torrc.$number
    echo "HashedControlPassword $_tor_hashpass" >> /etc/tor/torrc.$number
    if test $dnsport -eq 53 ; then
      echo "DNSPort $dnsport" >> /etc/tor/torrc.$number
      let dnsport=dnsport+1
    fi

    #brctl addbr Tor$counter
    #ip link set dev Tor$counter up
    #ip addr add 10.0.0.$ip_addr/24 br 255.255.255.0 dev Tor$counter

    ip link add eth$counter type dummy
    ip addr add 10.0.0.$ip_addr/24 brd + dev eth$counter label eth$counter:0
    ip link set dev eth$counter up

    let counter=counter+1
    let ip_addr=ip_addr+1
    sudo systemctl enable tor@$number.service > /dev/nul

    if ! systemctl status tor@$number.service > /dev/nul; then
      if sudo systemctl start tor@$number.service > /dev/nul; then
        echo Tor service startet and be ready!
	echo
      else
        echo Tor service failed to start!
	echo
#	exit
      fi
    else
      echo Tor service already started!
      echo
    fi

  done

  systemctl restart iptables

  echo "Tor ControlPort hashed password is: $_tor_hashpass"
  echo "Start Load Balancer for: $ip_addr_list"
#        "value is less or equal 1023"


#        _sprintf "stop" "value is equal or grather then 65536"

}


own_params() {

  eval set -- "$_GETOPT_PARAMS"
  while true ; do

    case $1 in

      --help)

        _help_

        shift ; _exit_ "0" ;;

      --debug)

        export stdout_mode="debug"

        shift ;;

      --verbose)

        export verbose_mode="true"

        shift ;;

      -i|--init)

        export init_state="1"

        export init_number="${2}"

        shift 2 ;;

      -k|--kill)

        export kill_state="1"

        export kill_status="0"

        shift ;;

      -s|--show-id)

        export show_id_state="1"

        shift ;;

      -n|--new-id)


        export new_id_state="1"

        shift ;;

      -u|--user)

        export user_state="1"

        export user_name="${2}"

        shift 2 ;;

      --socks-port)

        export socks_port_state=1

        export socks_port_number="${2}"

        shift 2 ;;

      --control-port)

        export control_port_state=1

        export control_port_number="${2}"

        shift 2 ;;

      --proxy)

        export proxy_state=1

        export proxy_type="${2}"

        shift 2 ;;

      --haproxy)

        export frontend_state=1

        export frontend_type="haproxy"

        shift 2 ;;

      *)

        if [[ "$2" == "-" ]] || [[ ! -z "$2" ]] ; then

          printf "%s: invalid option -- '%s'\\n" "$_init_name" "$2"
          _exit_ "1"


        # elif [[ -z "$2" ]] ; then break ; fi
        else break ; fi

        ;;

    esac

  done
}


__main__
